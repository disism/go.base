// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1alpha1/auth/account.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Name

	// no validation rules for Bio

	// no validation rules for Avatar

	// no validation rules for Private

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetResponseMultiError, or nil if none found.
func (m *UserGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetResponseMultiError(errors)
	}

	return nil
}

// UserGetResponseMultiError is an error wrapping multiple validation errors
// returned by UserGetResponse.ValidateAll() if the designated constraints
// aren't met.
type UserGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetResponseMultiError) AllErrors() []error { return m }

// UserGetResponseValidationError is the validation error returned by
// UserGetResponse.Validate if the designated constraints aren't met.
type UserGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetResponseValidationError) ErrorName() string { return "UserGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetResponseValidationError{}

// Validate checks the field values on UserCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreateRequestMultiError, or nil if none found.
func (m *UserCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 4 || l > 16 {
		err := UserCreateRequestValidationError{
			field:  "Username",
			reason: "value length must be between 4 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserCreateRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := UserCreateRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]{4,16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserCreateRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 7 || l > 24 {
		err := UserCreateRequestValidationError{
			field:  "Password",
			reason: "value length must be between 7 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserCreateRequest_Password_Pattern.MatchString(m.GetPassword()) {
		err := UserCreateRequestValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"[A-Z]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserCreateRequestMultiError(errors)
	}

	return nil
}

func (m *UserCreateRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserCreateRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserCreateRequestMultiError is an error wrapping multiple validation errors
// returned by UserCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type UserCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateRequestMultiError) AllErrors() []error { return m }

// UserCreateRequestValidationError is the validation error returned by
// UserCreateRequest.Validate if the designated constraints aren't met.
type UserCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateRequestValidationError) ErrorName() string {
	return "UserCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateRequestValidationError{}

var _UserCreateRequest_Username_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]{4,16}$")

var _UserCreateRequest_Password_Pattern = regexp.MustCompile("[A-Z]+")

// Validate checks the field values on UserCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreateResponseMultiError, or nil if none found.
func (m *UserCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for AuthorizationToken

	if len(errors) > 0 {
		return UserCreateResponseMultiError(errors)
	}

	return nil
}

// UserCreateResponseMultiError is an error wrapping multiple validation errors
// returned by UserCreateResponse.ValidateAll() if the designated constraints
// aren't met.
type UserCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateResponseMultiError) AllErrors() []error { return m }

// UserCreateResponseValidationError is the validation error returned by
// UserCreateResponse.Validate if the designated constraints aren't met.
type UserCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateResponseValidationError) ErrorName() string {
	return "UserCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateResponseValidationError{}

// Validate checks the field values on UserUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateRequestMultiError, or nil if none found.
func (m *UserUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) > 30 {
		err := UserUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 30 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBio()) > 280 {
		err := UserUpdateRequestValidationError{
			field:  "Bio",
			reason: "value length must be at most 280 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, err := url.Parse(m.GetAvatar()); err != nil {
		err = UserUpdateRequestValidationError{
			field:  "Avatar",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Private

	if len(errors) > 0 {
		return UserUpdateRequestMultiError(errors)
	}

	return nil
}

// UserUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UserUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateRequestMultiError) AllErrors() []error { return m }

// UserUpdateRequestValidationError is the validation error returned by
// UserUpdateRequest.Validate if the designated constraints aren't met.
type UserUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateRequestValidationError) ErrorName() string {
	return "UserUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateRequestValidationError{}

// Validate checks the field values on UserUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateResponseMultiError, or nil if none found.
func (m *UserUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UserUpdateResponseMultiError(errors)
	}

	return nil
}

// UserUpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UserUpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateResponseMultiError) AllErrors() []error { return m }

// UserUpdateResponseValidationError is the validation error returned by
// UserUpdateResponse.Validate if the designated constraints aren't met.
type UserUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateResponseValidationError) ErrorName() string {
	return "UserUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateResponseValidationError{}

// Validate checks the field values on UserEditPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserEditPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEditPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserEditPasswordRequestMultiError, or nil if none found.
func (m *UserEditPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEditPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPassword()); l < 7 || l > 24 {
		err := UserEditPasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be between 7 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserEditPasswordRequest_Password_Pattern.MatchString(m.GetPassword()) {
		err := UserEditPasswordRequestValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"[A-Z]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 7 || l > 24 {
		err := UserEditPasswordRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be between 7 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserEditPasswordRequest_NewPassword_Pattern.MatchString(m.GetNewPassword()) {
		err := UserEditPasswordRequestValidationError{
			field:  "NewPassword",
			reason: "value does not match regex pattern \"[A-Z]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserEditPasswordRequestMultiError(errors)
	}

	return nil
}

// UserEditPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by UserEditPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type UserEditPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEditPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEditPasswordRequestMultiError) AllErrors() []error { return m }

// UserEditPasswordRequestValidationError is the validation error returned by
// UserEditPasswordRequest.Validate if the designated constraints aren't met.
type UserEditPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEditPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEditPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEditPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEditPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEditPasswordRequestValidationError) ErrorName() string {
	return "UserEditPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserEditPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEditPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEditPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEditPasswordRequestValidationError{}

var _UserEditPasswordRequest_Password_Pattern = regexp.MustCompile("[A-Z]+")

var _UserEditPasswordRequest_NewPassword_Pattern = regexp.MustCompile("[A-Z]+")

// Validate checks the field values on UserEditPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserEditPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEditPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserEditPasswordResponseMultiError, or nil if none found.
func (m *UserEditPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEditPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UserEditPasswordResponseMultiError(errors)
	}

	return nil
}

// UserEditPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by UserEditPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type UserEditPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEditPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEditPasswordResponseMultiError) AllErrors() []error { return m }

// UserEditPasswordResponseValidationError is the validation error returned by
// UserEditPasswordResponse.Validate if the designated constraints aren't met.
type UserEditPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEditPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEditPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEditPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEditPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEditPasswordResponseValidationError) ErrorName() string {
	return "UserEditPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserEditPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEditPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEditPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEditPasswordResponseValidationError{}

// Validate checks the field values on UserEditUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserEditUsernameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEditUsernameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserEditUsernameRequestMultiError, or nil if none found.
func (m *UserEditUsernameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEditUsernameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 4 || l > 16 {
		err := UserEditUsernameRequestValidationError{
			field:  "Username",
			reason: "value length must be between 4 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserEditUsernameRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := UserEditUsernameRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]{4,16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 7 || l > 24 {
		err := UserEditUsernameRequestValidationError{
			field:  "Password",
			reason: "value length must be between 7 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserEditUsernameRequest_Password_Pattern.MatchString(m.GetPassword()) {
		err := UserEditUsernameRequestValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"[A-Z]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserEditUsernameRequestMultiError(errors)
	}

	return nil
}

// UserEditUsernameRequestMultiError is an error wrapping multiple validation
// errors returned by UserEditUsernameRequest.ValidateAll() if the designated
// constraints aren't met.
type UserEditUsernameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEditUsernameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEditUsernameRequestMultiError) AllErrors() []error { return m }

// UserEditUsernameRequestValidationError is the validation error returned by
// UserEditUsernameRequest.Validate if the designated constraints aren't met.
type UserEditUsernameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEditUsernameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEditUsernameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEditUsernameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEditUsernameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEditUsernameRequestValidationError) ErrorName() string {
	return "UserEditUsernameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserEditUsernameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEditUsernameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEditUsernameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEditUsernameRequestValidationError{}

var _UserEditUsernameRequest_Username_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]{4,16}$")

var _UserEditUsernameRequest_Password_Pattern = regexp.MustCompile("[A-Z]+")

// Validate checks the field values on UserEditUsernameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserEditUsernameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEditUsernameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserEditUsernameResponseMultiError, or nil if none found.
func (m *UserEditUsernameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEditUsernameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UserEditUsernameResponseMultiError(errors)
	}

	return nil
}

// UserEditUsernameResponseMultiError is an error wrapping multiple validation
// errors returned by UserEditUsernameResponse.ValidateAll() if the designated
// constraints aren't met.
type UserEditUsernameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEditUsernameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEditUsernameResponseMultiError) AllErrors() []error { return m }

// UserEditUsernameResponseValidationError is the validation error returned by
// UserEditUsernameResponse.Validate if the designated constraints aren't met.
type UserEditUsernameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEditUsernameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEditUsernameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEditUsernameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEditUsernameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEditUsernameResponseValidationError) ErrorName() string {
	return "UserEditUsernameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserEditUsernameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEditUsernameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEditUsernameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEditUsernameResponseValidationError{}

// Validate checks the field values on UserEditEMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserEditEMailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEditEMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserEditEMailRequestMultiError, or nil if none found.
func (m *UserEditEMailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEditEMailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserEditEMailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 7 || l > 24 {
		err := UserEditEMailRequestValidationError{
			field:  "Password",
			reason: "value length must be between 7 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserEditEMailRequest_Password_Pattern.MatchString(m.GetPassword()) {
		err := UserEditEMailRequestValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"[A-Z]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserEditEMailRequestMultiError(errors)
	}

	return nil
}

func (m *UserEditEMailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserEditEMailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserEditEMailRequestMultiError is an error wrapping multiple validation
// errors returned by UserEditEMailRequest.ValidateAll() if the designated
// constraints aren't met.
type UserEditEMailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEditEMailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEditEMailRequestMultiError) AllErrors() []error { return m }

// UserEditEMailRequestValidationError is the validation error returned by
// UserEditEMailRequest.Validate if the designated constraints aren't met.
type UserEditEMailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEditEMailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEditEMailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEditEMailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEditEMailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEditEMailRequestValidationError) ErrorName() string {
	return "UserEditEMailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserEditEMailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEditEMailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEditEMailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEditEMailRequestValidationError{}

var _UserEditEMailRequest_Password_Pattern = regexp.MustCompile("[A-Z]+")

// Validate checks the field values on UserEditEMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserEditEMailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEditEMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserEditEMailResponseMultiError, or nil if none found.
func (m *UserEditEMailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEditEMailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UserEditEMailResponseMultiError(errors)
	}

	return nil
}

// UserEditEMailResponseMultiError is an error wrapping multiple validation
// errors returned by UserEditEMailResponse.ValidateAll() if the designated
// constraints aren't met.
type UserEditEMailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEditEMailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEditEMailResponseMultiError) AllErrors() []error { return m }

// UserEditEMailResponseValidationError is the validation error returned by
// UserEditEMailResponse.Validate if the designated constraints aren't met.
type UserEditEMailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEditEMailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEditEMailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEditEMailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEditEMailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEditEMailResponseValidationError) ErrorName() string {
	return "UserEditEMailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserEditEMailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEditEMailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEditEMailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEditEMailResponseValidationError{}

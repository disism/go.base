syntax = "proto3";

package apis.proto.v1alpha1.auth;
option go_package = "v1alpha1/auth";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "validate/validate.proto";
import "google/protobuf/empty.proto";

service Account {
  rpc UserGet (google.protobuf.Empty) returns (UserGetResponse) {
    option (google.api.http) = {
      get: "/api/v1/auth/account/iam",
    };
  }

  rpc UserCreate (UserCreateRequest) returns (UserCreateResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/account/create",
      body: "*"
    };
  }

  rpc UserUpdate (UserUpdateRequest) returns (UserUpdateResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/account/update",
      body: "*"
    };
  }

  rpc UserEditPassword (UserEditPasswordRequest) returns (UserEditPasswordResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/account/edit/password",
      body: "*"
    };
  }

  rpc UserEditUsername (UserEditUsernameRequest) returns (UserEditUsernameResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/account/edit/username",
      body: "*"
    };
  }

  rpc UserEditEMail (UserEditEMailRequest) returns (UserEditEMailResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/account/edit/email",
      body: "*"
    };
  }
}

message User {
  string email = 1;
  string name = 2;
  string bio = 3;
  string avatar = 4;
  bool private = 5;
}

message UserGetResponse {
  string code = 1;
  string message = 2;
  User user = 3;
}

message UserCreateRequest {
  string username = 1 [(validate.rules).string = {
    pattern: "^[a-zA-Z0-9_-]{4,16}$",
    min_len: 4,
    max_len: 16,
  }];
  string email = 2 [(validate.rules).string.email = true];
  string password = 3 [(validate.rules).string = {
    pattern: "[A-Z]+",
    min_len: 7,
    max_len: 24,
  }];
}

message UserCreateResponse {
  string code = 1;
  string message = 2;
  string authorization_token = 3;
}

message UserUpdateRequest {
  string name = 1 [(validate.rules).string = {
    max_len: 30,
  }];
  string bio = 2 [(validate.rules).string = {
    max_len: 280,
  }];
  string avatar = 3 [(validate.rules).string = {
    uri_ref: true,
  }];
  bool private = 4;
}

message UserUpdateResponse {
  string code = 1;
  string message = 2;
}

message UserEditPasswordRequest {
  string password = 1 [(validate.rules).string = {
    pattern: "[A-Z]+",
    min_len: 7,
    max_len: 24,
  }];
  string new_password = 2 [(validate.rules).string = {
    pattern: "[A-Z]+",
    min_len: 7,
    max_len: 24,
  }];
}

message UserEditPasswordResponse {
  string code = 1;
  string message = 2;
}

message UserEditUsernameRequest {
  string username = 1 [(validate.rules).string = {
    pattern: "^[a-zA-Z0-9_-]{4,16}$",
    min_len: 4,
    max_len: 16,
  }];

  string password = 2 [(validate.rules).string = {
    pattern: "[A-Z]+",
    min_len: 7,
    max_len: 24,
  }];
}

message UserEditUsernameResponse {
  string code = 1;
  string message = 2;
}

message UserEditEMailRequest {
  string email = 1 [(validate.rules).string.email = true];
  string password = 2 [(validate.rules).string = {
    pattern: "[A-Z]+",
    min_len: 7,
    max_len: 24,
  }];
}

message UserEditEMailResponse {
  string code = 1;
  string message = 2;
}